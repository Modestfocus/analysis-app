// server/services/chat/unifiedPrompt.ts
export type SimilarItem = {
  chart: {
    filename?: string;
    depthMapPath?: string;
    edgeMapPath?: string;
    gradientMapPath?: string;
    timeframe?: string | null;
    instrument?: string | null;
  };
  similarity?: number;
};

export function buildUnifiedMessages(opts: {
  currentPromptText: string;   // dashboard Current Prompt
  injectText?: string;         // carries debugPromptId
  target: {
    filename?: string;
    depthMapPath?: string;
    edgeMapPath?: string;
    gradientMapPath?: string;
  };
  similars: SimilarItem[];
}) {
  const { currentPromptText, injectText, target, similars } = opts;

  // target originals live under /uploads/<filename>
  const targetImages = [
    target.filename && { type: 'image_url', image_url: { url: toAbs(`/uploads/${target.filename}`), detail: 'high' } },
    target.depthMapPath && { type: 'image_url', image_url: { url: toAbs(target.depthMapPath), detail: 'high' } },
    target.edgeMapPath && { type: 'image_url', image_url: { url: toAbs(target.edgeMapPath), detail: 'high' } },
    target.gradientMapPath && { type: 'image_url', image_url: { url: toAbs(target.gradientMapPath), detail: 'high' } },
  ].filter(Boolean) as any[];

  const similarImages: any[] = [];
  for (const { chart } of similars) {
    if (chart.filename) similarImages.push({ type: 'image_url', image_url: { url: toAbs(`/uploads/${chart.filename}`), detail: 'high' } });
    if (chart.depthMapPath) similarImages.push({ type: 'image_url', image_url: { url: toAbs(chart.depthMapPath), detail: 'high' } });
    if (chart.edgeMapPath) similarImages.push({ type: 'image_url', image_url: { url: toAbs(chart.edgeMapPath), detail: 'high' } });
    if (chart.gradientMapPath) similarImages.push({ type: 'image_url', image_url: { url: toAbs(chart.gradientMapPath), detail: 'high' } });
  }

  const system = { role: 'system', content: currentPromptText };

  const userText = [
    'Analyze this chart.',
    injectText || '' // MUST include so "debugPromptId":"UP-123" reaches the model
  ].filter(Boolean).join('\n\n');

  const user = {
    role: 'user',
    content: [
      { type: 'text', text: userText },
      ...targetImages,
      ...similarImages,
    ],
  };

  return [system, user];
}