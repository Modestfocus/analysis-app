import { db, sql } from '../db.js';

function l2Normalize(v: number[]) {
  const n = Math.sqrt(v.reduce((s, x) => s + x * x, 0)) || 1;
  return v.map(x => x / n);
}

/**
 * Minimal, no-filter vector search using pgvector.
 * 1) Try IVFFlat with probes=10
 * 2) If rows < k, fall back to exact scan (sequential)
 * Do NOT drop rows if maps are missing; maps are backfilled elsewhere.
 */
export async function getTopSimilarCharts(vec: number[], k = 3, excludeId?: number) {
  const qv = l2Normalize(vec);
  const qvStr = `[${qv.join(',')}]`; // pgvector literal; cast to ::vector(512)

  const excludeSql = excludeId ? sql`AND c.id <> ${excludeId}` : sql``;

  // 1) IVFFlat first
  console.log(`[RAG] query k=${k} { dim: 512, mode: 'ivfflat' }`);
  let res = await db.execute(sql`
    SET LOCAL ivfflat.probes = 10;
    WITH q(v) AS (SELECT ${qvStr}::vector(512))
    SELECT
      c.id,
      1 - (c.embedding <=> (SELECT v FROM q))::float8 AS similarity,
      c.filename, c.timeframe, c.instrument,
      c.depth_map_path, c.edge_map_path, c.gradient_map_path
    FROM charts c
    WHERE c.embedding IS NOT NULL
      ${excludeSql}
    ORDER BY c.embedding <=> (SELECT v FROM q)
    LIMIT ${k};
  `);
  let rows = res.rows as any[];
  console.table(rows.map(r => ({ id: r.id, sim: Number(r.similarity).toFixed(4) })));
  console.log(`[RAG] rows(ivfflat): ${rows.length}`);

  // 2) Exact-scan fallback if < k
  if (rows.length < k) {
    console.log(`[RAG] fallback to exact scan`);
    res = await db.execute(sql`
      SET LOCAL enable_indexscan = off;
      SET LOCAL enable_bitmapscan = off;
      SET LOCAL enable_seqscan = on;
      WITH q(v) AS (SELECT ${qvStr}::vector(512))
      SELECT
        c.id,
        1 - (c.embedding <=> (SELECT v FROM q))::float8 AS similarity,
        c.filename, c.timeframe, c.instrument,
        c.depth_map_path, c.edge_map_path, c.gradient_map_path
      FROM charts c
      WHERE c.embedding IS NOT NULL
        ${excludeSql}
      ORDER BY c.embedding <=> (SELECT v FROM q)
      LIMIT ${k};
    `);
    rows = res.rows as any[];
    console.table(rows.map(r => ({ id: r.id, sim: Number(r.similarity).toFixed(4) })));
    console.log(`[RAG] rows(exact): ${rows.length}`);
  }

  return rows;
}